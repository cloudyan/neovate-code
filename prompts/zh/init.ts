// Init提示词模板函数 (对应英文原文件: /src/slash-commands/builtin/init.ts)

export function generateInitPrompt(opts: {
  productName: string;
  ruleFile?: string;
}) {
  const ruleFile = opts.ruleFile ?? 'AGENTS.md';
  const productName = opts.productName;
  return `
请分析此代码库，并创建一个全面的 ${ruleFile} 文件，为未来在该仓库中工作的 ${productName} 提供指导。

## 必须包含的内容

### 1. 开发命令
识别并文档化所有开发工作流的关键命令：
- 构建/编译命令（npm run build、cargo build 等）
- 测试命令（运行所有测试、单测、watch 模式、覆盖率）
- 代码检查/格式化（eslint、prettier、clippy 等）
- 开发服务器（开发模式、热重载命令）
- 包管理（安装、更新、审计命令）
- 数据库/迁移命令（如果适用）
- 部署/发布命令（如果在 scripts 中存在）

### 2. 代码架构与模式
记录需要跨多个文件理解的“全局视图”：
- 项目结构理念（单仓/多包、模块、分层）
- 关键架构模式（MVC、微服务、插件系统等）
- 数据流模式（状态管理、事件处理、请求流程）
- 配置管理（设置/环境变量的处理方式）
- 关键抽象与接口（其他组件依赖的部分）
- 插件/扩展机制（如果存在）
- 构建/打包策略（webpack 配置、构建流水线）

### 3. 技术栈与依赖
- 核心框架/库及其使用模式
- 开发依赖及其用途
- 特殊工具或自定义构建流程

## 分析指南

### 若 ${ruleFile} 已存在：
- 与现有内容对比并提出具体改进建议
- 识别缺失的关键信息
- 指出过时或不正确的信息
- 保留有价值的现有内容

### 需要查阅的来源材料：
- package.json/Cargo.toml：提取 npm scripts、依赖、项目元数据
- README.md：包含安装说明、项目概览、重要注意事项
- .cursor/rules/ 或 .cursorrules：合并相关编码规范
- .github/copilot-instructions.md：纳入重要开发实践
- 配置文件：构建工具、linter、测试配置中的重要模式
- 源代码：寻找架构模式，而非穷举文件列表

### 不要包含的内容：
- 通用开发建议（“写好代码”、“测试你的改动”等）
- 显而易见的安全提醒（不要提交密钥等）
- 可以用 ls/find 发现的文件/目录穷举
- 虚构的版块，如“开发技巧”，除非在源码中实际存在
- 适用于任何代码库的模板化建议

## 输出要求

### 结构：
- 以所需的头部格式开始
- 使用清晰的 Markdown 标题分隔章节
- 简洁但全面
- 聚焦于与仓库相关的特定信息

### 必须的头部：
\`\`\`
# ${ruleFile}

此文件为 ${productName} 在本仓库中进行工作提供指导。
\`\`\`

### 语气：
- 直接且可执行
- 假设读者是称职的开发者
- 关注本代码库独特或不显而易见的内容
- 使用项目符号和清晰格式以便快速浏览

深入分析代码库，创建一个能够让未来的 AI 代理从第一天就高效工作的规则文件。
`.trim();
}
